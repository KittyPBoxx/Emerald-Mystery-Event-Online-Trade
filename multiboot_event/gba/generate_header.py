import subprocess

def extract_symbol_address(symbol, elf_file):
    # Use nm to extract the address of the symbol from the ELF file
    result = subprocess.run(['nm', '--defined-only', elf_file], capture_output=True, text=True)
    
    # Parse the nm output
    for line in result.stdout.splitlines():
        parts = line.split()
        if len(parts) >= 3 and parts[2] == symbol:
            address = parts[0]
            return int(address, 16)  # Convert address to integer
    return None

def generate_header_file(elf_file, output_file):
    custom_defines = {
        "SAVE_BLOCK_1": "gSaveblock1",
        "SAVE_BLOCK_2": "gSaveblock2",
        "SAVE_BLOCK_3": "gPokemonStorage",
        "SAVE_BLOCK_1_PTR": "gSaveBlock1Ptr",
        "CONNECTION_WORKING": "gUnusedBattleMainVar",
        "LOAD_GAME_SAVE": "LoadGameSave",
        "AGB_MAIN": "AgbMain",
        "RELOAD_SAVE": "ReloadSave",
        "LOAD_PLAYER_PARTY": "LoadPlayerParty",
        "EASY_CHAT_WINDOW_GFX":"gEasyChatWindow_Gfx",
        "EASY_CHAT_WINDOW_TILEMAP": "gEasyChatWindow_Tilemap",
        "WAVE_MAIL_PALETTE": "gMailPalette_Wave",
        "OLD_CHAR_MAP": "gUnusedGfx_OldCharmap",
        "OLD_CHAR_TILEMAP": "gUnusedTimemap_OldCharmap"
    }
    
    with open(output_file, 'w') as f:
        # Add an auto-generated comment at the top
        f.write('/*\n')
        f.write(' * This file is auto-generated by generate_header.py script.\n')
        f.write(' * Do not edit manually.\n')
        f.write(' */\n\n')
        
        f.write('#ifndef GENERATED_SYMBOLS_H\n')
        f.write('#define GENERATED_SYMBOLS_H\n\n')
        
        for define_name, symbol_name in custom_defines.items():
            address = extract_symbol_address(symbol_name, elf_file)
            if address is not None:
                f.write(f'#define {define_name} 0x{address:08X}\n')
            else:
                print(f"Warning: Symbol {symbol_name} not found in the ELF file.")
        
        f.write('#endif // GENERATED_SYMBOLS_H\n')

if __name__ == "__main__":
    elf_file = 'pokeemerald.elf'  # Path to your ELF file
    output_file = 'source/generated_symbols.h'

    generate_header_file(elf_file, output_file)
    print(f"Header file {output_file} generated successfully.")
